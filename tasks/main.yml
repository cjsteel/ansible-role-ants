---
# roles/ants/tasks/main.yml

# was an ants directory created before now?

- name: "Do we already have an ants directory?"
  stat:
    path: '{{ ants_dir_path }}'
  register: stat_ants_result

- name: "check value of stat_ants_result"
  debug:
    var=stat_ants_result

# install any requirements

## Update the apt-cache

- name: "update apt cache"
  apt: update_cache=yes cache_valid_time=43200
  tags: [ 'packages', 'ants-requirements' ]
  when: ants_state == 'present'

## UCF-OLD Check
#
# Bug fix for Ubuntu 16.04

- name: "Check if 50unattended-upgrades.ucf.old exists when workstation role starts"
  stat:
    path: '/etc/apt/apt.conf.d/50unattended-upgrades.ucf-old'
  register: stat_result
  when: ants_state == 'present'

- name: "check value of stat_50unattended-upgrades_ucf_old_result"
  debug:
    var=stat_result

- name: "Check for 50unattended-upgrades.ucf-old, remove and notify if found"
  file:
    path: '/etc/apt/apt.conf.d/50unattended-upgrades.ucf.old'
    state: absent
  when: ants_state == 'present'

## dist-upgrade

- name: "run an apt-get dist-upgrade"
  apt: upgrade=dist
  tags: [ 'packages' ]
  when: ants_state == 'present'

# restart the system 

- name: "debug the value of the ansible_connection variable"
  debug:
    var=ansible_connection
  tags: [ 'debug' ]

- name: "debug the value of the ants_reboot_target variable"
  debug:
    var=ants_reboot_target
  tags: [ 'debug' ]

- name: "restart the system after dist-upgrade"
  shell: sleep 2 && shutdown -r now "Ansible actuated reboot following dist-upgrade"
  async: 1
  poll: 0
  become: true
  ignore_errors: true
  register: ants_reboot_target_test
  when: ansible_connection != 'local' and ants_reboot_target is defined and ants_reboot_target == true and ants_state == 'present'

# wait for target systems port 22 to become available before continuing

- name: "debug the value of the ants_reboot_target_test variable"
  debug:
    var=ants_reboot_target_test
  tags: [ 'debug' ]


- name: "debug the value of ansible_connection"
  debug:
    var=ansible_connection
  tags: [ 'debug' ]


- name: "debug the value of ants_ssh_port"
  debug:
    var=ants_ssh_port
  tags: [ 'debug' ]



- name: "pause when os is ubuntu 16.04 cause it takes a bit longer for shorewall to start for some reason"
  pause: seconds=10
  when: ansible_connection != 'local' and ants_reboot_target is defined and ants_reboot_target == true and ansible_distribution_version == '16.04' and ants_state == 'present'

## Ensure any requirements for Ubuntu 16.04 are installed

- name: "ensure Ubuntu 16.04 requirements are installed"
  apt: name={{ item }} state=present
  become: True
  with_items:
    - git
    - cmake-curses-gui
    - zlib1g-dev
    - gcc
    - g++
  tags: [ 'packages', 'ants-requirements' ]
  when: ants_state == 'present'

# git checkout

- name: Create ants resource path
  become: true
  file: 
    path: '{{ ants_deployment_resource_path}}'
    state: directory
    owner: '{{ ants_deployment_user }}'
    group: '{{ ants_deployment_user }}'
    mode: 0750

- name: "Clone ANTs repository"
  git:
    repo: '{{ ants_git_url }}'
    dest: '{{ ants_deployment_resource_path }}'
    version: '{{ ants_version }}'
  when: ants_state == 'present'

- name: "Create the ants bin directory"
  file:
    path : '{{ ants_dir_path }}'
    owner: '{{ ants_owner }}'
    group: '{{ ants_group }}'
    mode : '{{ ants_mode }}'
    state : '{{ ants_directory_state }}'
  when: ants_state == 'present'

- name: "get our current home directory"
  become: '{{ ants_deployment_user }}'
  shell: >
    getent passwd {{ ants_deployment_user }} | cut -d: -f6
  changed_when: false
  register: user_home

- name: debug output
  debug: var=user_home.stdout

- name: Copy over ants make packages, including Scripts from local to remote hosts
  become: true
  copy:
    src: '{{ ants_local_resource_path }}/{{ ants_package }}'
    dest: '{{ ants_deployment_resource_path }}/usr_bin_ants.tar'
    owner: '{{ ants_deployment_user }}'
    group: '{{ ants_deployment_user }}'
    mode : '{{ ants_mode }}'
  when : ants_install_type == 'all_users'  and ants_state == 'present'

#- name: "Copy over usr_bin_ants.tar"
#  copy:
#    src : 'usr_bin_ants.tar'
#    dest: '{{ ants_deployment_resource_path}}/usr_bin_ants.tar'
#    owner: '{{ ants_deployment_user }}'
#    group: '{{ ants_deployment_user }}'
#    mode : '{{ ants_mode }}'
#  when : ants_install_type == 'all_users'  and ants_state == 'present'


- name: "debug the value of ants_dir_path"
  debug:
    var=ants_dir_path
  tags: [ 'debug' ]


- name: "Unarchive our make stuff to the bin/ants dir, including Scripts"
  unarchive:
    src: '{{ ants_deployment_resource_path}}/usr_bin_ants.tar'
    dest: '{{ ants_dir_path }}'
    owner: '{{ ants_owner }}'
    group: '{{ ants_group }}'
    mode : '{{ ants_mode }}'
    remote_src: yes
  register: ants_package_unarchived  


- name: simulate long running op (15 sec), wait for up to 45, poll every 5
  command: /bin/sleep 15
  async: 45
  poll: 5

- name: "debug the value of ants_deployment_user"
  debug:
     var=ants_deployment_user
  tags: [ 'debug' ]

- name: "ensure ANTs scripts directoy exists under ants_dir_path"
  file:
     path: '{{ ants_dir_path }}/bin'
     state: directory
     recurse: yes


- name: "path exports to /etc/skel/.bashrc when ants_state is absent or purge"
  become: true
  blockinfile:
    marker: '## {mark} ANSIBLE MANAGED BLOCK in ~/.bashrc for ANTs'
    dest: '/etc/skel/.bashrc'
    insertafter: 'EOF'
    block: |
      # export the ANTs path
      #
      # ANTs 
       if [ -d "/opt/ants/bin" ] ; then
         PATH="/opt/ants/bin:$PATH"
       fi

